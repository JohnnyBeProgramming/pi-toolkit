#!/bin/bash
# -----------------------------------------------------------------------------
set -euo pipefail # Stop running the script on first error...
# -----------------------------------------------------------------------------
# Enables remote SSH access to the rasberry pi device
# See also: https://www.raspberrypi.org/documentation/remote-access/ssh/

function start {
    define_colors

    # Install and enable the SSH service
    sudo systemctl enable ssh
    sudo systemctl start ssh

    display_help_text
}

function display_help_text {
    HOST=$(hostname -I | cut -d ' ' -f1)
    printf "
${DEBUG}${UNDERLINE}If you are using a VM (like VirtualBox), you need to set your network settings...${NONE}${DEBUG}
In VirtualBox, go to:
-> Settings -> Network -> Adapter 1 
-> Choose 'Host-only adapter' 
-> OK ${NONE}

${TITLE}You can connect with a remote SSH agent to this device at:${NONE}\n
${DEBUG} -> ${SILVER}ssh ${LINK}${USER}@${HOST}${NONE} ${DEBUG}[ ${ARGS}<command>${DEBUG} ] ${NONE}

${DEBUG}  # Alternatively, open a remote vscode development environment on the device
${DEBUG} -> ${SILVER}code --remote ssh-remote+${LINK}${USER}@${HOST}${NONE} ${BOLD}${ARGS}/home/pi/${NONE}

"
}

function define_colors {
  BOLD="\e[1m"
  DEBUG="\e[90m"
  RED="\e[31m"
  GREEN="\e[32m"
  BLUE="\e[34m"
  YELLOW="\e[33m"
  NONE="\e[0m"
  WHITE="\e[97m"
  SILVER="\e[37m"
  UNDERLINE="\e[4m"
  BRIGHT="\e[1m"
  MAGENTA="\e[95m"
  CYAN="\e[96m"
  ARGS="${MAGENTA}"
  VALUE="${UNDERLINE}${CYAN}"
  LINK="${UNDERLINE}${BLUE}${BRIGHT}"
  TITLE="\n${UNDERLINE}${WHITE}${BRIGHT}${BOLD}"
  WARN="${BRIGHT}${BOLD}${YELLOW}"
}

function cleanup {
  printf "${NONE}" # Reset terminal colors
}

# Bootstrap the app after setting the cleanup post processor
trap cleanup EXIT
start "$@" 